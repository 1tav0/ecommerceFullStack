For authentication we need:   
  - bcrypt 
  - jwt 
  - cookie-parser 

why do we need cookies? for refresh token 
why do we need refresh token ? for authentication purposes 
- install cookie-parser 
- add field refreshToken type String to model 
- app.use(cookieParser);
- make refreshToken file and its implementation function
- make use of refreshToken in user controller
- generate refreshToken when we log in 
- update the User by id and pass in the new refreshToken to its refreshToken property 
- then res.cookie("refreshToken", refreshToken, {
      httpOnly: true,
      maxAge: 72 * 60 * 60 * 1000
    });

- now we can make a handler adn route for the refreshToken using the cookie from the request cookies passed when we loggin in 

**************WHY COOKIES FOR REFRESHIN TOKEN**************
User Login (Endpoint: /login):

When a user logs in with their credentials (email and password), your server verifies the credentials.
If the credentials are valid, you generate a new refresh token and update the user's record in the database with this new refresh token.
You set the refresh token as an HTTP-only cookie in the response. The purpose of setting it as an HTTP-only cookie is to enhance security by preventing client-side access to the cookie via JavaScript.
Handling Refresh Token (Endpoint: /refresh or similar):

When the access token expires, the client can make a request to the /refresh endpoint with the stored refresh token in the cookie.
In your handleRefreshToken function, you retrieve the refresh token from the cookie in the request.
You verify the refresh token against the one stored in the database for the corresponding user.
If the refresh token is valid, you generate a new access token and send it back to the client. The new access token can then be used for accessing protected resources on the server.
Why Use Refresh Tokens:

Enhanced Security: Access tokens have a shorter lifespan for security reasons. If an access token is compromised, the damage is limited by its short validity. Refresh tokens, on the other hand, can have a longer lifespan since they are used less frequently and can be used to obtain a new access token.
Reduced Password Exposure: The refresh token is less frequently transmitted over the network than the user's password. This reduces the risk associated with intercepting and using the user's credentials.


***********extra packages********
$npm i morgan 
app.use(morgan("dev")) // to see the request in the console 
GET /api/product/6580ea0e7c25e120a2e482fe 200 100.556 ms - 255
GET /api/product 200 94.717 ms - 505


$npm i slugify 
helps us modify the model, used in the controllers

will have a request to make a product like this : 
{
    "title":"samsung laptop",
    "category": "Laptop",
    "brand":"Samsung",
    "description":"samsung item",
    "price": 500,
    "quantity": 100,
    "color": "gray"
} and it will output like this 
{
    "newProduct": {
        "title": "samsung laptop",
        "slug": "samsung-laptop",
        "description": "samsung item",
        "price": 500,
        "category": "Laptop",
        "quantity": 100,
        "images": [],
        "color": "gray",
        "brand": "Samsung",
        "sold": 0,
        "_id": "6581c92eb3cd54b3803582a2",
        "ratings": [],
        "createdAt": "2023-12-19T16:47:42.692Z",
        "updatedAt": "2023-12-19T16:47:42.692Z",
        "__v": 0
    }
}

notice the slug property is set bc we have used slugify in the api controller 

// for email integration

$npm i nodemailer 
// to make use of nodemailer we need to create a controller for it 

const sendEmail = asyncHandler(async (data, req, res) => {
  let transporter = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    secure: false, // true for 465, false for other ports
    auth: {
      user: process.env.MAIL_ID, // generated ethereal user
      pass: process.env.MP // generated ethereal password
    },
  });
  //send mail with defined transport object
  let info = await transporter.sendMail({
    from: '"HEY ðŸ‘»" <abc@gmail.com.com>', // sender address
    to: data.to, // list of receivers
    subject: data.subject, //subject line
    text: data.text, // plain text body
    html: data.htm//html body
  });
  console.log("Message sent: %s", info.messageId);
  
  // Preview only available when sending through an Ethereal account
  console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info))
})

notice this: host: "smtp.gmail.com",

means we will be using gmail, so we will need to provide our account and our password 

auth: {
      user: process.env.MAIL_ID, // generated ethereal user
      pass: process.env.MP // generated ethereal password
    },

however, since we have 2-step verification in google we will need to generate a app password so our third party app can have access to gmail account.

google -> "google app password" -> App Passwords - Sign In - Google Accounts -> name the app -> get the password 

upon getting the password use by saving it in the .env file

then we just make our resetPassword function.
