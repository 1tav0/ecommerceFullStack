SHORTCUTS: just like "rafce" theres !mdbgum "MongoDataBaseGenerateUserModel"

For authentication we need:   
  - bcrypt 
  - jwt 
  - cookie-parser 

why do we need cookies? for refresh token 
why do we need refresh token ? for authentication purposes 
- install cookie-parser 
- add field refreshToken type String to model 
- app.use(cookieParser);
- make refreshToken file and its implementation function
- make use of refreshToken in user controller
- generate refreshToken when we log in 
- update the User by id and pass in the new refreshToken to its refreshToken property 
- then res.cookie("refreshToken", refreshToken, {
      httpOnly: true,
      maxAge: 72 * 60 * 60 * 1000
    });

- now we can make a handler and route for the refreshToken using the cookie from the request cookies passed when we loggin in 

**************WHY COOKIES FOR REFRESHIN TOKEN**************
User Login (Endpoint: /login):

When a user logs in with their credentials (email and password), your server verifies the credentials.
If the credentials are valid, you generate a new refresh token and update the user's record in the database with this new refresh token.
You set the refresh token as an HTTP-only cookie in the response. The purpose of setting it as an HTTP-only cookie is to enhance security by preventing client-side access to the cookie via JavaScript.
Handling Refresh Token (Endpoint: /refresh or similar):

When the access token expires, the client can make a request to the /refresh endpoint with the stored refresh token in the cookie.
In your handleRefreshToken function, you retrieve the refresh token from the cookie in the request.
You verify the refresh token against the one stored in the database for the corresponding user.
If the refresh token is valid, you generate a new access token and send it back to the client. The new access token can then be used for accessing protected resources on the server.
Why Use Refresh Tokens:

Enhanced Security: Access tokens have a shorter lifespan for security reasons. If an access token is compromised, the damage is limited by its short validity. Refresh tokens, on the other hand, can have a longer lifespan since they are used less frequently and can be used to obtain a new access token.
Reduced Password Exposure: The refresh token is less frequently transmitted over the network than the user's password. This reduces the risk associated with intercepting and using the user's credentials.


***********extra packages********
$npm i morgan 
app.use(morgan("dev")) // to see the request in the console 
GET /api/product/6580ea0e7c25e120a2e482fe 200 100.556 ms - 255
GET /api/product 200 94.717 ms - 505

**************
$npm i slugify 
helps us modify the model, used in the controllers

will have a request to make a product like this : 
{
    "title":"samsung laptop",
    "category": "Laptop",
    "brand":"Samsung",
    "description":"samsung item",
    "price": 500,
    "quantity": 100,
    "color": "gray"
} and it will output like this 
{
    "newProduct": {
        "title": "samsung laptop",
        "slug": "samsung-laptop",
        "description": "samsung item",
        "price": 500,
        "category": "Laptop",
        "quantity": 100,
        "images": [],
        "color": "gray",
        "brand": "Samsung",
        "sold": 0,
        "_id": "6581c92eb3cd54b3803582a2",
        "ratings": [],
        "createdAt": "2023-12-19T16:47:42.692Z",
        "updatedAt": "2023-12-19T16:47:42.692Z",
        "__v": 0
    }
}

notice the slug property is set bc we have used slugify in the api controller 

**************email integration***************

$npm i nodemailer 
// to make use of nodemailer we need to create a controller for it 

const sendEmail = asyncHandler(async (data, req, res) => {
  let transporter = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    secure: false, // true for 465, false for other ports
    auth: {
      user: process.env.MAIL_ID, // generated ethereal user
      pass: process.env.MP // generated ethereal password
    },
  });
  //send mail with defined transport object
  let info = await transporter.sendMail({
    from: '"HEY ðŸ‘»" <abc@gmail.com.com>', // sender address
    to: data.to, // list of receivers
    subject: data.subject, //subject line
    text: data.text, // plain text body
    html: data.htm//html body
  });
  console.log("Message sent: %s", info.messageId);
  
  // Preview only available when sending through an Ethereal account
  console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info))
})

notice this: host: "smtp.gmail.com",

means we will be using gmail, so we will need to provide our account and our password 

auth: {
      user: process.env.MAIL_ID, // generated ethereal user
      pass: process.env.MP // generated ethereal password
    },

however, since we have 2-step verification in google we will need to generate a app password so our third party app can have access to gmail account.

google -> "google app password" -> App Passwords - Sign In - Google Accounts -> name the app -> get the password 

upon getting the password use by saving it in the .env file

then we just make our resetPassword function.

******************CODE GREPPER***************

Notes on SCHEMA: 
Options: 

In Mongoose, the toJSON and toObject options allow you to control how Mongoose documents are transformed when converted to JSON or JavaScript objects.

toJSON Option:

When set to true, the toJSON option includes virtual properties in the JSON representation of the document.
Virtual properties are properties that are not stored in the database but can be computed based on existing data. They are useful for adding calculated or derived fields to the document.

toObject Option:

Similar to toJSON, the toObject option controls the transformation of documents to JavaScript objects.
If set to true, it includes virtual properties in the JavaScript object representation.

The timestamps option, when set to true, automatically adds two fields to each document:
createdAt: Represents the timestamp of the document's creation.
updatedAt: Represents the timestamp of the document's last update.
These fields are useful for tracking when documents are created and modified.

Virtuals:

In Mongoose, virtuals are additional properties that you can define on a schema but are not persisted in the database.
Virtuals are computed properties that can be based on the values of other fields in the document.
They are useful for adding derived or calculated properties without actually storing them in the database.

how to make use of these properties: 
const blogSchema = new mongoose.Schema({
  title: String,
  description: String,
  // ... other fields ...
});

// Define a virtual property for the full blog URL based on the title
blogSchema.virtual('fullUrl').get(function() {
  return `/blogs/${this.title}`;
});


************CLODUINARY**************
1. make cloudinary file for configuration 
const cloudinary = require('cloudinary');

cloudinary.confing({
  cloud_name: process.env.CLOUD_NAME,
  api_key: process.env.API_KEY,
  api_secret: process.env.API_SECRET
});

const cloudinaryUploadImg = async (fileToUpload) => {
  return new Promise((resolve) => {
    cloudinary.uploader.upload(fileToUpload, (result) => {
      resolve(
        {
          url: result.secure_url,
        },
        {
          resource_type: "auto"
        }
      )
    })
  })
}

module.exports = cloudinaryUploadImg;

2. you get the configurations from your cloudinary dashboard 

3. make uploadImages.js file in middleware folder 

4. npm install multer sharp cloudinary

multer : to handle multi part form data 
sharp : to change format, quality of data 

// Configuring multer's storage engine. This specifies where to save the uploaded files and how to name them
const multerStorage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.join(__dirname, "../public/images"));
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
    cb(null, file.fieldname + "-" + uniqueSuffix + ".jpeg");
  }
})

- In the context of Multer, destination is a property of the storage engine configuration. It specifies the directory where uploaded files will be saved.
- The destination property is a function that takes three parameters: req (the request object), file (the file being uploaded), and cb (a callback function).
- __dirname is a special variable in Node.js that represents the absolute path of the directory containing the currently executing script.
- It is useful for creating absolute paths and ensuring that file operations are relative to the script's location.

path.join(__dirname, "../public/images"):

- joins the current script's directory (__dirname) with the relative path ../public/images

- The ../ in the path means to go up one level in the directory structure, and public/images specifies the destination directory where the uploaded files will be stored

cb(null, ...) (Callback):

- The cb callback function is invoked with two parameters: null (indicating no error) and the destination directory path.
- Multer uses this information to determine where to save the uploaded file.

- The destination property ensures that the uploaded files are saved in the "public/images" directory relative to the script's location. This is a common practice to organize uploaded files and make it easier to serve them through a web server. In essence, this configuration ensures that the uploaded files will be stored in the "public/images" directory, and the use of __dirname ensures that the path is resolved correctly regardless of where the script is executed from.

- The filename property is a function that generates a unique filename for each uploaded file. It is part of the multer.diskStorage configuration, specifically responsible for determining how to name the files.

- Date.now() returns the current timestamp in milliseconds.
It is used to create a unique part of the filename based on the current time when the file is uploaded.

- Math.random() generates a random decimal between 0 (inclusive) and 1 (exclusive).
- Math.random() * 1e9 scales this random value to be between 0 and 1 billion.
- Math.round(...) rounds the result to the nearest whole number.
This part is used to create a random suffix to add to the filename, ensuring uniqueness.

- file.fieldname is the name of the field in the form that is used for file uploads. In your case, it's assumed to be "images" based on the previous parts of the code.

 + "-" +:

This part of the code adds a hyphen ("-") between the fieldname and the unique suffix, ensuring a clear separation in the filename.

.jpeg:

- This specifies the file extension for the uploaded files. In this case, it's set to ".jpeg". This is consistent with the configuration earlier, where the processed images are saved with a ".jpeg" extension.

cb(null, ...): (Callback)

- The cb callback function is invoked with two parameters: null (indicating no error) and the generated filename.
Multer uses this information to determine how to name and save the uploaded file.

- The filename function generates a unique filename for each uploaded file based on the fieldname ("images"), the current timestamp, and a random suffix. This ensures that each file is uniquely identified and avoids naming conflicts.

file.mimetype:

MIME (Multipurpose Internet Mail Extensions)

A MIME type is a label used to identify the type of data contained in a file. It consists of two parts: a primary type and a sub-type, separated by a slash (/).
Examples of MIME types include:
- text/html for HTML documents
- image/jpeg for JPEG images
- audio/mp3 for MP3 audio files
- application/pdf for PDF documents


**** Multer Instance ****
  const uploadPhoto = multer({
  storage: multerStorage,
  fileFilter: multerFilter,
  limits: { fieldSize: 2000000 }
});

storage: multerStorage

- Specifies the storage engine to be used by Multer for handling file storage. In this case, it's set to multerStorage, which is an instance of multer.diskStorage that defines where and how uploaded files will be stored on the server.

fileFilter: multerFilter:

- Defines a filter function that determines which files should be accepted and which should be rejected during the file upload process. It uses the multerFilter function to check the file's MIME type and file extension.

limits: { fieldSize: 2000000 }:

- Specifies limits on the size of the incoming form fields. In this case, it sets a limit on the field size to 2,000,000 bytes (approximately 2 MB). This is a measure to control the size of the uploaded files.

How to Use uploadPhoto in an Express Route:

- uploadPhoto can be used as middleware in an Express route to handle file uploads.

const express = require('express');
const router = express.Router();

router.post('/upload', uploadPhoto.single('file'), (req, res) => {
  // Handle the uploaded file in the route handler
  // req.file contains information about the uploaded file
  res.send('File uploaded successfully!');
});

module.exports = router;

- In this example, uploadPhoto.single('file') specifies that the route expects a single file upload with the field name 'file'. The uploaded file information will be available in req.file for further processing.